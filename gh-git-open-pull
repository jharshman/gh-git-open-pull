#!/bin/bash
set -e

#
# gh-git-open-pull
# 
# A GitHub CLI extension automating the opening of a PR based on a created issue number.
# The Bitly PR "standard" workflow renames feature branches with the issue/PR number suffixed.
# This helps find branches associated with PRs.
#
# This extension mirrors high level functionality of jehiah/git-open-pull.
#

which fzf > /dev/null 2>&1
if [[ $? != 0 ]]; then
  echo "fzf required but not found in PATH"
  exit 1
fi

logfile='/tmp/gh-git-open-pull.log'
tmpfileBody='/tmp/gh-git-open-pull.body'
baseBranch='master'
userName=$(git config --local --get user.name || :)
if [[ $useName == "" ]]; then
  # local not found, try global git config
  userName=$(git config --get user.name || :)
  if [[ $userName == "" ]]; then
    # user.name not found, error
    echo "error obtaining user.name entry from git config"
    exit 1
  fi
fi

# create issue
labels=$(gh api /repos/{owner}/{repo}/labels --paginate --jq .[].name | fzf --height=20% --border --layout=reverse -m --header="select labels (tab/shift-tab to multi-select)")
labelopt=()
for l in $labels; do
  opt=$(printf " -l=%s" $l)
  labelopt+=($opt)
done

read -p "Issue Title: " issueTitle
printf "# Enter Issue Body\n# Lines starting with # will be ignored.\n" > $tmpfileBody
git log -1 --pretty=%B >> $tmpfileBody
$EDITOR $tmpfileBody
sed -i '/#/d' $tmpfileBody

gh issue create \
  --assignee @me \
  "${labelopt[@]}" \
  --title="$issueTitle" \
  --body-file=$tmpfileBody > /tmp/issueCreated
status=$?
if [[ $status != 0 ]]; then
  echo "Error creating issue."
  exit $status
fi

issueNumber=$(cat /tmp/issueCreated | awk -F'/' '{print $NF}')
rm /tmp/issueCreated

# rename branch
branchName=$(git branch --show-current)
git branch -m $(printf "%s_%s" $branchName $issueNumber)
branchName=$(git branch --show-current)

# push to remote
remote=$(git remote -v | cut -d' ' -f1 | uniq | fzf --height=20% --border --layout=reverse --header="select remote" | awk -F' ' '{print $1}')
git push $remote $branchName

# create pull request
head=$(printf "%s:%s" $userName $branchName)
prLink=$(gh api -XPOST /repos/{owner}/{repo}/pulls \
  -F base=$baseBranch \
  -F head=$head \
  -F issue=$issueNumber \
  --jq .html_url)

status=$?
if [[ $status != 0 ]]; then
  printf "There was an error creating your PR. See log: %s\n" $logfile
  exit 1
fi

printf "\nPR created: %s\n" $prLink

